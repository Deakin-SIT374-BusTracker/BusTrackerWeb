@model  IEnumerable<BusTrackerWeb.Models.DepartureModel>

@{ 
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-header">
    <h1><img style="max-width:50px; margin-top: -4px; margin-right: 10px; float:left;" src="~/Content/Images/bushop-logo.png">Your Journey</h1>
</div>

<div>
    <div class="row" style="width: 100%">
        <div class="col-md-6">
            <table id="scheduleTable" class="table table-striped">
                <tr>
                    <th>Bus Stop:</th>
                    <th>Departure Time:</th>
                </tr>
                
                @foreach (var departure in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => departure.Stop.StopName)</td>
                        <td>@Html.DisplayFor(modelItem => departure.ScheduledDeparture)</td>
                    </tr>
                }
            </table>
        </div>
        <div class="col-md-6">
            <div id="map_canvas" style="min-height:40em; width:100%"></div>
        </div>
    </div>
</div>


@section scripts {
    @* Include Google Map Javascript Package *@
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCqZFelSFhnk3JDbFVx7qovf8IIG1ZViVs&libraries=geometry"></script>

    <script type="text/javascript">
        /*
        Function: document.Ready()
        Jquery function called after document has been rendered.
        */
        $(document).ready(function () {
            setInterval(simulateLocation, 10000);
        });


         /*
        Function: document.Ready()
        Render a Google Map and render the bus route markers and polyline.
        */
        function initGoogleMap() {
            // Find the map center coordinates.
            var departures = @Html.Raw(Json.Encode(@ViewBag.Departures));
            var centerIndex = Math.round(departures.length / 2)
            var centerLocation = new google.maps.LatLng(departures[centerIndex].Stop.StopLatitude, departures[centerIndex].Stop.StopLatitude);

            // Set map options.
            var options = {
                zoom: 14,
                center: centerLocation,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            // Update map with options.
            var map = new google.maps.Map(document.getElementById("map_canvas"), options);

            // Add map markers and set bounds.
            var bounds = new google.maps.LatLngBounds();




            // Trial
            var buslocation = new google.maps.LatLng(departures[0].Stop.StopLatitude, departures[0].Stop.StopLongitude);
            var busMarker = new google.maps.Marker({
                position: buslocation,
                map: map,
                icon: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png'
            });



            // Initialise an Info Window object.
            var infowindow = null;
            infowindow = new google.maps.InfoWindow({ content: "holding..." });

            // Iterate through each departures and create a new map marker with info
            // window.
            for (var i = 0; i < departures.length; i++) {
                // Create Marker.
                var newlocation = new google.maps.LatLng(departures[i].Stop.StopLatitude, departures[i].Stop.StopLongitude);
                var newMarker = new google.maps.Marker({
                    position: newlocation,
                    map: map,
                    title: departures[i].Stop.StopName,
                    html: '<h4>' + departures[i].Stop.StopName + '</h4><p>' + new Date(parseInt(departures[i].ScheduledDeparture.replace('/Date(', ''))) + '</p>',
                });

                // Add Info Window to marker.
                google.maps.event.addListener(newMarker, 'click', function () {
                    infowindow.setContent(this.html);
                    infowindow.open(map, this);
                });

                // Ajusted bounds of map based on new marker.
                bounds.extend(newMarker.getPosition());
            }


            moveMarker(map, busMarker);

            map.fitBounds(bounds);


            // Render the collection of polylines returned by the Google Directions
            // API.
            var encodedPolyline = @Html.Raw(Json.Encode(@ViewBag.EncodePolylines));
            for (var i = 0; i < encodedPolyline.length; i++) {
                var decodedPolyline = google.maps.geometry.encoding.decodePath(encodedPolyline[i]);
                var drivePath = new google.maps.Polyline({
                    path: decodedPolyline,
                    geodesic: true,
                    strokeColor: '#FF0000',
                    strokeOpacity: 1.0,
                    strokeWeight: 2
                });

                drivePath.setMap(map);
            }
        }


        function moveMarker(map, marker) {

            //delayed so you can see it move
            setInterval(function () {
                $.get("/api/Bus/GetBusOnRouteLocation", { routeId: @ViewBag.RouteId }, function (response) {
                    if (response.length > 0) {
                        marker.setPosition(new google.maps.LatLng(response[0].BusLatitude, response[0].BusLongitude));
                        marker.setTitle(response[0].BusRegoNumber);
                        console.log('Bus Lat: ' + response[0].BusLatitude + '   Bus Lng: ' + response[0].BusLongitude);
                    }
                });
            }, 10000);
        };


        initGoogleMap();


        function simulateLocation() {
            $.get("/Journey/SimulateLocation", { runId: @ViewBag.RunId, routeId: @ViewBag.RouteId }, function (response) { });
        }

    </script>
}